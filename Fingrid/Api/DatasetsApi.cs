/*
 * avoindata-api
 *
 * API for Fingrid Open Data
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Fingrid.Client;
using Fingrid.Model;

namespace Fingrid.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatasetsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// GetDataset
        /// </summary>
        /// <remarks>
        /// Returns a single dataset or 404 error if not found
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dataset</returns>
        Dataset GetDataset(int datasetId, int operationIndex = 0);

        /// <summary>
        /// GetDataset
        /// </summary>
        /// <remarks>
        /// Returns a single dataset or 404 error if not found
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dataset</returns>
        ApiResponse<Dataset> GetDatasetWithHttpInfo(int datasetId, int operationIndex = 0);
        /// <summary>
        /// GetDatasetData
        /// </summary>
        /// <remarks>
        /// Returns datasetdata or empty array if no data is found.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="startTime">Format - date-time (as date-time in RFC3339). Starting time from which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="endTime">Format - date-time (as date-time in RFC3339). Ending time up to which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="format">Response format. Either json, csv or xml. Default is json. (optional)</param>
        /// <param name="oneRowPerTimePeriod">If true, returns one row per time period, instead of one row per observation. Currently does not support XML. Default is false. (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="locale">Language for response. Used only if oneRowPerTimePeriod is true. Either en or fi. Default is en. (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">Order results in this direction. Either asc or desc. Default is asc. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TimeseriesDataResponse</returns>
        TimeseriesDataResponse GetDatasetData(int datasetId, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), string format = default(string), bool? oneRowPerTimePeriod = default(bool?), int? page = default(int?), int? pageSize = default(int?), string locale = default(string), string sortBy = default(string), string sortOrder = default(string), int operationIndex = 0);

        /// <summary>
        /// GetDatasetData
        /// </summary>
        /// <remarks>
        /// Returns datasetdata or empty array if no data is found.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="startTime">Format - date-time (as date-time in RFC3339). Starting time from which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="endTime">Format - date-time (as date-time in RFC3339). Ending time up to which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="format">Response format. Either json, csv or xml. Default is json. (optional)</param>
        /// <param name="oneRowPerTimePeriod">If true, returns one row per time period, instead of one row per observation. Currently does not support XML. Default is false. (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="locale">Language for response. Used only if oneRowPerTimePeriod is true. Either en or fi. Default is en. (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">Order results in this direction. Either asc or desc. Default is asc. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TimeseriesDataResponse</returns>
        ApiResponse<TimeseriesDataResponse> GetDatasetDataWithHttpInfo(int datasetId, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), string format = default(string), bool? oneRowPerTimePeriod = default(bool?), int? page = default(int?), int? pageSize = default(int?), string locale = default(string), string sortBy = default(string), string sortOrder = default(string), int operationIndex = 0);
        /// <summary>
        /// GetDatasetFile
        /// </summary>
        /// <remarks>
        /// Return a single datasetfile or 404 error if not found
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="fileId">Format - int32. The ID of the file to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileData</returns>
        FileData GetDatasetFile(int datasetId, int fileId, int operationIndex = 0);

        /// <summary>
        /// GetDatasetFile
        /// </summary>
        /// <remarks>
        /// Return a single datasetfile or 404 error if not found
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="fileId">Format - int32. The ID of the file to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileData</returns>
        ApiResponse<FileData> GetDatasetFileWithHttpInfo(int datasetId, int fileId, int operationIndex = 0);
        /// <summary>
        /// GetDatasetFileData
        /// </summary>
        /// <remarks>
        /// Returns datasetfiledata or 404 error if not found or a 422 error if validation fails.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="startTime">Format - date-time (as date-time in RFC3339). Starting time from which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="endTime">Format - date-time (as date-time in RFC3339). Ending time up to which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="sortOrder"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IWithPaginationFileData</returns>
        IWithPaginationFileData GetDatasetFileData(int datasetId, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), int operationIndex = 0);

        /// <summary>
        /// GetDatasetFileData
        /// </summary>
        /// <remarks>
        /// Returns datasetfiledata or 404 error if not found or a 422 error if validation fails.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="startTime">Format - date-time (as date-time in RFC3339). Starting time from which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="endTime">Format - date-time (as date-time in RFC3339). Ending time up to which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="sortOrder"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IWithPaginationFileData</returns>
        ApiResponse<IWithPaginationFileData> GetDatasetFileDataWithHttpInfo(int datasetId, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), int operationIndex = 0);
        /// <summary>
        /// GetDatasetShorts
        /// </summary>
        /// <remarks>
        /// Returns list of all public datasets, with pagination. If no parameters are given, returns all datasets sorted by dataset ID. If search parameter is given, returns datasets sorted by relevance.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search phrase to filter datasets. If given as parameter, other parameters are ignored, and results are sorted by relevance. Notes: 1) Search is case insensitive. 2) Search is done for dataset name, description, keywords and content groups. 3) Search is done for both Finnish and English versions of the fields. (optional)</param>
        /// <param name="ids">Comma-separated list of dataset ids (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="orderBy">Order results by this attribute. Accepts \&quot;id\&quot;, \&quot;nameFi\&quot;, \&quot;nameEn\&quot;. Default is id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDatasetShorts200Response</returns>
        GetDatasetShorts200Response GetDatasetShorts(string search = default(string), string ids = default(string), int? page = default(int?), int? pageSize = default(int?), string orderBy = default(string), int operationIndex = 0);

        /// <summary>
        /// GetDatasetShorts
        /// </summary>
        /// <remarks>
        /// Returns list of all public datasets, with pagination. If no parameters are given, returns all datasets sorted by dataset ID. If search parameter is given, returns datasets sorted by relevance.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search phrase to filter datasets. If given as parameter, other parameters are ignored, and results are sorted by relevance. Notes: 1) Search is case insensitive. 2) Search is done for dataset name, description, keywords and content groups. 3) Search is done for both Finnish and English versions of the fields. (optional)</param>
        /// <param name="ids">Comma-separated list of dataset ids (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="orderBy">Order results by this attribute. Accepts \&quot;id\&quot;, \&quot;nameFi\&quot;, \&quot;nameEn\&quot;. Default is id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDatasetShorts200Response</returns>
        ApiResponse<GetDatasetShorts200Response> GetDatasetShortsWithHttpInfo(string search = default(string), string ids = default(string), int? page = default(int?), int? pageSize = default(int?), string orderBy = default(string), int operationIndex = 0);
        /// <summary>
        /// GetLastDataByDataset
        /// </summary>
        /// <remarks>
        /// Return a last data by dataset or 404 error if not found
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TimeseriesData</returns>
        TimeseriesData GetLastDataByDataset(int datasetId, int operationIndex = 0);

        /// <summary>
        /// GetLastDataByDataset
        /// </summary>
        /// <remarks>
        /// Return a last data by dataset or 404 error if not found
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TimeseriesData</returns>
        ApiResponse<TimeseriesData> GetLastDataByDatasetWithHttpInfo(int datasetId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatasetsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// GetDataset
        /// </summary>
        /// <remarks>
        /// Returns a single dataset or 404 error if not found
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dataset</returns>
        System.Threading.Tasks.Task<Dataset> GetDatasetAsync(int datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetDataset
        /// </summary>
        /// <remarks>
        /// Returns a single dataset or 404 error if not found
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dataset>> GetDatasetWithHttpInfoAsync(int datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetDatasetData
        /// </summary>
        /// <remarks>
        /// Returns datasetdata or empty array if no data is found.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="startTime">Format - date-time (as date-time in RFC3339). Starting time from which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="endTime">Format - date-time (as date-time in RFC3339). Ending time up to which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="format">Response format. Either json, csv or xml. Default is json. (optional)</param>
        /// <param name="oneRowPerTimePeriod">If true, returns one row per time period, instead of one row per observation. Currently does not support XML. Default is false. (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="locale">Language for response. Used only if oneRowPerTimePeriod is true. Either en or fi. Default is en. (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">Order results in this direction. Either asc or desc. Default is asc. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeseriesDataResponse</returns>
        System.Threading.Tasks.Task<TimeseriesDataResponse> GetDatasetDataAsync(int datasetId, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), string format = default(string), bool? oneRowPerTimePeriod = default(bool?), int? page = default(int?), int? pageSize = default(int?), string locale = default(string), string sortBy = default(string), string sortOrder = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetDatasetData
        /// </summary>
        /// <remarks>
        /// Returns datasetdata or empty array if no data is found.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="startTime">Format - date-time (as date-time in RFC3339). Starting time from which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="endTime">Format - date-time (as date-time in RFC3339). Ending time up to which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="format">Response format. Either json, csv or xml. Default is json. (optional)</param>
        /// <param name="oneRowPerTimePeriod">If true, returns one row per time period, instead of one row per observation. Currently does not support XML. Default is false. (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="locale">Language for response. Used only if oneRowPerTimePeriod is true. Either en or fi. Default is en. (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">Order results in this direction. Either asc or desc. Default is asc. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeseriesDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeseriesDataResponse>> GetDatasetDataWithHttpInfoAsync(int datasetId, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), string format = default(string), bool? oneRowPerTimePeriod = default(bool?), int? page = default(int?), int? pageSize = default(int?), string locale = default(string), string sortBy = default(string), string sortOrder = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetDatasetFile
        /// </summary>
        /// <remarks>
        /// Return a single datasetfile or 404 error if not found
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="fileId">Format - int32. The ID of the file to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileData</returns>
        System.Threading.Tasks.Task<FileData> GetDatasetFileAsync(int datasetId, int fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetDatasetFile
        /// </summary>
        /// <remarks>
        /// Return a single datasetfile or 404 error if not found
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="fileId">Format - int32. The ID of the file to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileData)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileData>> GetDatasetFileWithHttpInfoAsync(int datasetId, int fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetDatasetFileData
        /// </summary>
        /// <remarks>
        /// Returns datasetfiledata or 404 error if not found or a 422 error if validation fails.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="startTime">Format - date-time (as date-time in RFC3339). Starting time from which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="endTime">Format - date-time (as date-time in RFC3339). Ending time up to which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="sortOrder"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IWithPaginationFileData</returns>
        System.Threading.Tasks.Task<IWithPaginationFileData> GetDatasetFileDataAsync(int datasetId, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetDatasetFileData
        /// </summary>
        /// <remarks>
        /// Returns datasetfiledata or 404 error if not found or a 422 error if validation fails.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="startTime">Format - date-time (as date-time in RFC3339). Starting time from which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="endTime">Format - date-time (as date-time in RFC3339). Ending time up to which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="sortOrder"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IWithPaginationFileData)</returns>
        System.Threading.Tasks.Task<ApiResponse<IWithPaginationFileData>> GetDatasetFileDataWithHttpInfoAsync(int datasetId, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetDatasetShorts
        /// </summary>
        /// <remarks>
        /// Returns list of all public datasets, with pagination. If no parameters are given, returns all datasets sorted by dataset ID. If search parameter is given, returns datasets sorted by relevance.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search phrase to filter datasets. If given as parameter, other parameters are ignored, and results are sorted by relevance. Notes: 1) Search is case insensitive. 2) Search is done for dataset name, description, keywords and content groups. 3) Search is done for both Finnish and English versions of the fields. (optional)</param>
        /// <param name="ids">Comma-separated list of dataset ids (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="orderBy">Order results by this attribute. Accepts \&quot;id\&quot;, \&quot;nameFi\&quot;, \&quot;nameEn\&quot;. Default is id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDatasetShorts200Response</returns>
        System.Threading.Tasks.Task<GetDatasetShorts200Response> GetDatasetShortsAsync(string search = default(string), string ids = default(string), int? page = default(int?), int? pageSize = default(int?), string orderBy = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetDatasetShorts
        /// </summary>
        /// <remarks>
        /// Returns list of all public datasets, with pagination. If no parameters are given, returns all datasets sorted by dataset ID. If search parameter is given, returns datasets sorted by relevance.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search phrase to filter datasets. If given as parameter, other parameters are ignored, and results are sorted by relevance. Notes: 1) Search is case insensitive. 2) Search is done for dataset name, description, keywords and content groups. 3) Search is done for both Finnish and English versions of the fields. (optional)</param>
        /// <param name="ids">Comma-separated list of dataset ids (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="orderBy">Order results by this attribute. Accepts \&quot;id\&quot;, \&quot;nameFi\&quot;, \&quot;nameEn\&quot;. Default is id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDatasetShorts200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDatasetShorts200Response>> GetDatasetShortsWithHttpInfoAsync(string search = default(string), string ids = default(string), int? page = default(int?), int? pageSize = default(int?), string orderBy = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetLastDataByDataset
        /// </summary>
        /// <remarks>
        /// Return a last data by dataset or 404 error if not found
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeseriesData</returns>
        System.Threading.Tasks.Task<TimeseriesData> GetLastDataByDatasetAsync(int datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetLastDataByDataset
        /// </summary>
        /// <remarks>
        /// Return a last data by dataset or 404 error if not found
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeseriesData)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeseriesData>> GetLastDataByDatasetWithHttpInfoAsync(int datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatasetsApi : IDatasetsApiSync, IDatasetsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DatasetsApi : IDatasetsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DatasetsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DatasetsApi(string basePath)
        {
            this.Configuration = Fingrid.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Fingrid.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DatasetsApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Fingrid.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Fingrid.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DatasetsApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Fingrid.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// GetDataset Returns a single dataset or 404 error if not found
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dataset</returns>
        public Dataset GetDataset(int datasetId, int operationIndex = 0)
        {
            ApiResponse<Dataset> localVarResponse = GetDatasetWithHttpInfo(datasetId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetDataset Returns a single dataset or 404 error if not found
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dataset</returns>
        public ApiResponse<Dataset> GetDatasetWithHttpInfo(int datasetId, int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasetId", ClientUtils.ParameterToString(datasetId)); // path parameter

            localVarRequestOptions.Operation = "DatasetsApi.GetDataset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (apiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Dataset>("/datasets/{datasetId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetDataset Returns a single dataset or 404 error if not found
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dataset</returns>
        public async System.Threading.Tasks.Task<Dataset> GetDatasetAsync(int datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<Dataset> localVarResponse = await GetDatasetWithHttpInfoAsync(datasetId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetDataset Returns a single dataset or 404 error if not found
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dataset>> GetDatasetWithHttpInfoAsync(int datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasetId", ClientUtils.ParameterToString(datasetId)); // path parameter

            localVarRequestOptions.Operation = "DatasetsApi.GetDataset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (apiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Dataset>("/datasets/{datasetId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetDatasetData Returns datasetdata or empty array if no data is found.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="startTime">Format - date-time (as date-time in RFC3339). Starting time from which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="endTime">Format - date-time (as date-time in RFC3339). Ending time up to which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="format">Response format. Either json, csv or xml. Default is json. (optional)</param>
        /// <param name="oneRowPerTimePeriod">If true, returns one row per time period, instead of one row per observation. Currently does not support XML. Default is false. (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="locale">Language for response. Used only if oneRowPerTimePeriod is true. Either en or fi. Default is en. (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">Order results in this direction. Either asc or desc. Default is asc. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TimeseriesDataResponse</returns>
        public TimeseriesDataResponse GetDatasetData(int datasetId, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), string format = default(string), bool? oneRowPerTimePeriod = default(bool?), int? page = default(int?), int? pageSize = default(int?), string locale = default(string), string sortBy = default(string), string sortOrder = default(string), int operationIndex = 0)
        {
            ApiResponse<TimeseriesDataResponse> localVarResponse = GetDatasetDataWithHttpInfo(datasetId, startTime, endTime, format, oneRowPerTimePeriod, page, pageSize, locale, sortBy, sortOrder);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetDatasetData Returns datasetdata or empty array if no data is found.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="startTime">Format - date-time (as date-time in RFC3339). Starting time from which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="endTime">Format - date-time (as date-time in RFC3339). Ending time up to which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="format">Response format. Either json, csv or xml. Default is json. (optional)</param>
        /// <param name="oneRowPerTimePeriod">If true, returns one row per time period, instead of one row per observation. Currently does not support XML. Default is false. (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="locale">Language for response. Used only if oneRowPerTimePeriod is true. Either en or fi. Default is en. (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">Order results in this direction. Either asc or desc. Default is asc. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TimeseriesDataResponse</returns>
        public ApiResponse<TimeseriesDataResponse> GetDatasetDataWithHttpInfo(int datasetId, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), string format = default(string), bool? oneRowPerTimePeriod = default(bool?), int? page = default(int?), int? pageSize = default(int?), string locale = default(string), string sortBy = default(string), string sortOrder = default(string), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasetId", ClientUtils.ParameterToString(datasetId)); // path parameter
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (oneRowPerTimePeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "oneRowPerTimePeriod", oneRowPerTimePeriod));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (locale != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "locale", locale));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }

            localVarRequestOptions.Operation = "DatasetsApi.GetDatasetData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (apiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TimeseriesDataResponse>("/datasets/{datasetId}/data", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasetData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetDatasetData Returns datasetdata or empty array if no data is found.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="startTime">Format - date-time (as date-time in RFC3339). Starting time from which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="endTime">Format - date-time (as date-time in RFC3339). Ending time up to which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="format">Response format. Either json, csv or xml. Default is json. (optional)</param>
        /// <param name="oneRowPerTimePeriod">If true, returns one row per time period, instead of one row per observation. Currently does not support XML. Default is false. (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="locale">Language for response. Used only if oneRowPerTimePeriod is true. Either en or fi. Default is en. (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">Order results in this direction. Either asc or desc. Default is asc. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeseriesDataResponse</returns>
        public async System.Threading.Tasks.Task<TimeseriesDataResponse> GetDatasetDataAsync(int datasetId, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), string format = default(string), bool? oneRowPerTimePeriod = default(bool?), int? page = default(int?), int? pageSize = default(int?), string locale = default(string), string sortBy = default(string), string sortOrder = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<TimeseriesDataResponse> localVarResponse = await GetDatasetDataWithHttpInfoAsync(datasetId, startTime, endTime, format, oneRowPerTimePeriod, page, pageSize, locale, sortBy, sortOrder, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetDatasetData Returns datasetdata or empty array if no data is found.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="startTime">Format - date-time (as date-time in RFC3339). Starting time from which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="endTime">Format - date-time (as date-time in RFC3339). Ending time up to which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="format">Response format. Either json, csv or xml. Default is json. (optional)</param>
        /// <param name="oneRowPerTimePeriod">If true, returns one row per time period, instead of one row per observation. Currently does not support XML. Default is false. (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="locale">Language for response. Used only if oneRowPerTimePeriod is true. Either en or fi. Default is en. (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">Order results in this direction. Either asc or desc. Default is asc. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeseriesDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TimeseriesDataResponse>> GetDatasetDataWithHttpInfoAsync(int datasetId, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), string format = default(string), bool? oneRowPerTimePeriod = default(bool?), int? page = default(int?), int? pageSize = default(int?), string locale = default(string), string sortBy = default(string), string sortOrder = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasetId", ClientUtils.ParameterToString(datasetId)); // path parameter
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (oneRowPerTimePeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "oneRowPerTimePeriod", oneRowPerTimePeriod));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (locale != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "locale", locale));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }

            localVarRequestOptions.Operation = "DatasetsApi.GetDatasetData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (apiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TimeseriesDataResponse>("/datasets/{datasetId}/data", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasetData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetDatasetFile Return a single datasetfile or 404 error if not found
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="fileId">Format - int32. The ID of the file to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileData</returns>
        public FileData GetDatasetFile(int datasetId, int fileId, int operationIndex = 0)
        {
            ApiResponse<FileData> localVarResponse = GetDatasetFileWithHttpInfo(datasetId, fileId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetDatasetFile Return a single datasetfile or 404 error if not found
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="fileId">Format - int32. The ID of the file to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileData</returns>
        public ApiResponse<FileData> GetDatasetFileWithHttpInfo(int datasetId, int fileId, int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasetId", ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("fileId", ClientUtils.ParameterToString(fileId)); // path parameter

            localVarRequestOptions.Operation = "DatasetsApi.GetDatasetFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (apiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FileData>("/datasets/{datasetId}/files/{fileId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasetFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetDatasetFile Return a single datasetfile or 404 error if not found
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="fileId">Format - int32. The ID of the file to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileData</returns>
        public async System.Threading.Tasks.Task<FileData> GetDatasetFileAsync(int datasetId, int fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<FileData> localVarResponse = await GetDatasetFileWithHttpInfoAsync(datasetId, fileId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetDatasetFile Return a single datasetfile or 404 error if not found
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="fileId">Format - int32. The ID of the file to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileData>> GetDatasetFileWithHttpInfoAsync(int datasetId, int fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasetId", ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("fileId", ClientUtils.ParameterToString(fileId)); // path parameter

            localVarRequestOptions.Operation = "DatasetsApi.GetDatasetFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (apiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FileData>("/datasets/{datasetId}/files/{fileId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasetFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetDatasetFileData Returns datasetfiledata or 404 error if not found or a 422 error if validation fails.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="startTime">Format - date-time (as date-time in RFC3339). Starting time from which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="endTime">Format - date-time (as date-time in RFC3339). Ending time up to which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="sortOrder"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IWithPaginationFileData</returns>
        public IWithPaginationFileData GetDatasetFileData(int datasetId, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), int operationIndex = 0)
        {
            ApiResponse<IWithPaginationFileData> localVarResponse = GetDatasetFileDataWithHttpInfo(datasetId, startTime, endTime, page, pageSize, sortOrder);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetDatasetFileData Returns datasetfiledata or 404 error if not found or a 422 error if validation fails.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="startTime">Format - date-time (as date-time in RFC3339). Starting time from which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="endTime">Format - date-time (as date-time in RFC3339). Ending time up to which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="sortOrder"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IWithPaginationFileData</returns>
        public ApiResponse<IWithPaginationFileData> GetDatasetFileDataWithHttpInfo(int datasetId, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasetId", ClientUtils.ParameterToString(datasetId)); // path parameter
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }

            localVarRequestOptions.Operation = "DatasetsApi.GetDatasetFileData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (apiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<IWithPaginationFileData>("/datasets/{datasetId}/files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasetFileData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetDatasetFileData Returns datasetfiledata or 404 error if not found or a 422 error if validation fails.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="startTime">Format - date-time (as date-time in RFC3339). Starting time from which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="endTime">Format - date-time (as date-time in RFC3339). Ending time up to which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="sortOrder"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IWithPaginationFileData</returns>
        public async System.Threading.Tasks.Task<IWithPaginationFileData> GetDatasetFileDataAsync(int datasetId, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<IWithPaginationFileData> localVarResponse = await GetDatasetFileDataWithHttpInfoAsync(datasetId, startTime, endTime, page, pageSize, sortOrder, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetDatasetFileData Returns datasetfiledata or 404 error if not found or a 422 error if validation fails.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="startTime">Format - date-time (as date-time in RFC3339). Starting time from which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="endTime">Format - date-time (as date-time in RFC3339). Ending time up to which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="sortOrder"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IWithPaginationFileData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IWithPaginationFileData>> GetDatasetFileDataWithHttpInfoAsync(int datasetId, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasetId", ClientUtils.ParameterToString(datasetId)); // path parameter
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }

            localVarRequestOptions.Operation = "DatasetsApi.GetDatasetFileData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (apiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IWithPaginationFileData>("/datasets/{datasetId}/files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasetFileData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetDatasetShorts Returns list of all public datasets, with pagination. If no parameters are given, returns all datasets sorted by dataset ID. If search parameter is given, returns datasets sorted by relevance.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search phrase to filter datasets. If given as parameter, other parameters are ignored, and results are sorted by relevance. Notes: 1) Search is case insensitive. 2) Search is done for dataset name, description, keywords and content groups. 3) Search is done for both Finnish and English versions of the fields. (optional)</param>
        /// <param name="ids">Comma-separated list of dataset ids (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="orderBy">Order results by this attribute. Accepts \&quot;id\&quot;, \&quot;nameFi\&quot;, \&quot;nameEn\&quot;. Default is id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDatasetShorts200Response</returns>
        public GetDatasetShorts200Response GetDatasetShorts(string search = default(string), string ids = default(string), int? page = default(int?), int? pageSize = default(int?), string orderBy = default(string), int operationIndex = 0)
        {
            ApiResponse<GetDatasetShorts200Response> localVarResponse = GetDatasetShortsWithHttpInfo(search, ids, page, pageSize, orderBy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetDatasetShorts Returns list of all public datasets, with pagination. If no parameters are given, returns all datasets sorted by dataset ID. If search parameter is given, returns datasets sorted by relevance.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search phrase to filter datasets. If given as parameter, other parameters are ignored, and results are sorted by relevance. Notes: 1) Search is case insensitive. 2) Search is done for dataset name, description, keywords and content groups. 3) Search is done for both Finnish and English versions of the fields. (optional)</param>
        /// <param name="ids">Comma-separated list of dataset ids (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="orderBy">Order results by this attribute. Accepts \&quot;id\&quot;, \&quot;nameFi\&quot;, \&quot;nameEn\&quot;. Default is id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDatasetShorts200Response</returns>
        public ApiResponse<GetDatasetShorts200Response> GetDatasetShortsWithHttpInfo(string search = default(string), string ids = default(string), int? page = default(int?), int? pageSize = default(int?), string orderBy = default(string), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }

            localVarRequestOptions.Operation = "DatasetsApi.GetDatasetShorts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (apiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetDatasetShorts200Response>("/datasets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasetShorts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetDatasetShorts Returns list of all public datasets, with pagination. If no parameters are given, returns all datasets sorted by dataset ID. If search parameter is given, returns datasets sorted by relevance.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search phrase to filter datasets. If given as parameter, other parameters are ignored, and results are sorted by relevance. Notes: 1) Search is case insensitive. 2) Search is done for dataset name, description, keywords and content groups. 3) Search is done for both Finnish and English versions of the fields. (optional)</param>
        /// <param name="ids">Comma-separated list of dataset ids (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="orderBy">Order results by this attribute. Accepts \&quot;id\&quot;, \&quot;nameFi\&quot;, \&quot;nameEn\&quot;. Default is id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDatasetShorts200Response</returns>
        public async System.Threading.Tasks.Task<GetDatasetShorts200Response> GetDatasetShortsAsync(string search = default(string), string ids = default(string), int? page = default(int?), int? pageSize = default(int?), string orderBy = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<GetDatasetShorts200Response> localVarResponse = await GetDatasetShortsWithHttpInfoAsync(search, ids, page, pageSize, orderBy, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetDatasetShorts Returns list of all public datasets, with pagination. If no parameters are given, returns all datasets sorted by dataset ID. If search parameter is given, returns datasets sorted by relevance.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search phrase to filter datasets. If given as parameter, other parameters are ignored, and results are sorted by relevance. Notes: 1) Search is case insensitive. 2) Search is done for dataset name, description, keywords and content groups. 3) Search is done for both Finnish and English versions of the fields. (optional)</param>
        /// <param name="ids">Comma-separated list of dataset ids (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="orderBy">Order results by this attribute. Accepts \&quot;id\&quot;, \&quot;nameFi\&quot;, \&quot;nameEn\&quot;. Default is id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDatasetShorts200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDatasetShorts200Response>> GetDatasetShortsWithHttpInfoAsync(string search = default(string), string ids = default(string), int? page = default(int?), int? pageSize = default(int?), string orderBy = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }

            localVarRequestOptions.Operation = "DatasetsApi.GetDatasetShorts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (apiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetDatasetShorts200Response>("/datasets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasetShorts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetLastDataByDataset Return a last data by dataset or 404 error if not found
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TimeseriesData</returns>
        public TimeseriesData GetLastDataByDataset(int datasetId, int operationIndex = 0)
        {
            ApiResponse<TimeseriesData> localVarResponse = GetLastDataByDatasetWithHttpInfo(datasetId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetLastDataByDataset Return a last data by dataset or 404 error if not found
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TimeseriesData</returns>
        public ApiResponse<TimeseriesData> GetLastDataByDatasetWithHttpInfo(int datasetId, int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasetId", ClientUtils.ParameterToString(datasetId)); // path parameter

            localVarRequestOptions.Operation = "DatasetsApi.GetLastDataByDataset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (apiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TimeseriesData>("/datasets/{datasetId}/data/latest", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLastDataByDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetLastDataByDataset Return a last data by dataset or 404 error if not found
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeseriesData</returns>
        public async System.Threading.Tasks.Task<TimeseriesData> GetLastDataByDatasetAsync(int datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<TimeseriesData> localVarResponse = await GetLastDataByDatasetWithHttpInfoAsync(datasetId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetLastDataByDataset Return a last data by dataset or 404 error if not found
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Format - int32. The ID of the dataset to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeseriesData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TimeseriesData>> GetLastDataByDatasetWithHttpInfoAsync(int datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasetId", ClientUtils.ParameterToString(datasetId)); // path parameter

            localVarRequestOptions.Operation = "DatasetsApi.GetLastDataByDataset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (apiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TimeseriesData>("/datasets/{datasetId}/data/latest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLastDataByDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
