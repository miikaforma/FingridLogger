/*
 * avoindata-api
 *
 * API for Fingrid Open Data
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Fingrid.Client;
using Fingrid.Model;

namespace Fingrid.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// GetMultipleTimeseriesData
        /// </summary>
        /// <remarks>
        /// Get data for multiple datasets. Returns empty array if no data is found. If only part of requested datasets have data in generel or for requested timespan, those data are returned.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasets">Comma-separated list of dataset ids</param>
        /// <param name="startTime">Format - date-time (as date-time in RFC3339). Starting time from which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="endTime">Format - date-time (as date-time in RFC3339). Ending time up to which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="format">Response format. Either json, csv or xml. Default is json. (optional)</param>
        /// <param name="oneRowPerTimePeriod">If true, returns one row per time period, instead of one row per observation. Result has an attribute for each requested dataset. Currently does not support XML. Default is false. (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="locale">Language for response. Used only if oneRowPerTimePeriod is true. Either en or fi. Default is en. (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">Order results in this direction. Either asc or desc. Default is asc. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TimeseriesDataResponse</returns>
        TimeseriesDataResponse GetMultipleTimeseriesData(string datasets, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), string format = default(string), bool? oneRowPerTimePeriod = default(bool?), int? page = default(int?), int? pageSize = default(int?), string locale = default(string), string sortBy = default(string), string sortOrder = default(string), int operationIndex = 0);

        /// <summary>
        /// GetMultipleTimeseriesData
        /// </summary>
        /// <remarks>
        /// Get data for multiple datasets. Returns empty array if no data is found. If only part of requested datasets have data in generel or for requested timespan, those data are returned.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasets">Comma-separated list of dataset ids</param>
        /// <param name="startTime">Format - date-time (as date-time in RFC3339). Starting time from which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="endTime">Format - date-time (as date-time in RFC3339). Ending time up to which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="format">Response format. Either json, csv or xml. Default is json. (optional)</param>
        /// <param name="oneRowPerTimePeriod">If true, returns one row per time period, instead of one row per observation. Result has an attribute for each requested dataset. Currently does not support XML. Default is false. (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="locale">Language for response. Used only if oneRowPerTimePeriod is true. Either en or fi. Default is en. (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">Order results in this direction. Either asc or desc. Default is asc. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TimeseriesDataResponse</returns>
        ApiResponse<TimeseriesDataResponse> GetMultipleTimeseriesDataWithHttpInfo(string datasets, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), string format = default(string), bool? oneRowPerTimePeriod = default(bool?), int? page = default(int?), int? pageSize = default(int?), string locale = default(string), string sortBy = default(string), string sortOrder = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// GetMultipleTimeseriesData
        /// </summary>
        /// <remarks>
        /// Get data for multiple datasets. Returns empty array if no data is found. If only part of requested datasets have data in generel or for requested timespan, those data are returned.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasets">Comma-separated list of dataset ids</param>
        /// <param name="startTime">Format - date-time (as date-time in RFC3339). Starting time from which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="endTime">Format - date-time (as date-time in RFC3339). Ending time up to which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="format">Response format. Either json, csv or xml. Default is json. (optional)</param>
        /// <param name="oneRowPerTimePeriod">If true, returns one row per time period, instead of one row per observation. Result has an attribute for each requested dataset. Currently does not support XML. Default is false. (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="locale">Language for response. Used only if oneRowPerTimePeriod is true. Either en or fi. Default is en. (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">Order results in this direction. Either asc or desc. Default is asc. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeseriesDataResponse</returns>
        System.Threading.Tasks.Task<TimeseriesDataResponse> GetMultipleTimeseriesDataAsync(string datasets, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), string format = default(string), bool? oneRowPerTimePeriod = default(bool?), int? page = default(int?), int? pageSize = default(int?), string locale = default(string), string sortBy = default(string), string sortOrder = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetMultipleTimeseriesData
        /// </summary>
        /// <remarks>
        /// Get data for multiple datasets. Returns empty array if no data is found. If only part of requested datasets have data in generel or for requested timespan, those data are returned.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasets">Comma-separated list of dataset ids</param>
        /// <param name="startTime">Format - date-time (as date-time in RFC3339). Starting time from which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="endTime">Format - date-time (as date-time in RFC3339). Ending time up to which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="format">Response format. Either json, csv or xml. Default is json. (optional)</param>
        /// <param name="oneRowPerTimePeriod">If true, returns one row per time period, instead of one row per observation. Result has an attribute for each requested dataset. Currently does not support XML. Default is false. (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="locale">Language for response. Used only if oneRowPerTimePeriod is true. Either en or fi. Default is en. (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">Order results in this direction. Either asc or desc. Default is asc. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeseriesDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeseriesDataResponse>> GetMultipleTimeseriesDataWithHttpInfoAsync(string datasets, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), string format = default(string), bool? oneRowPerTimePeriod = default(bool?), int? page = default(int?), int? pageSize = default(int?), string locale = default(string), string sortBy = default(string), string sortOrder = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataApi : IDataApiSync, IDataApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataApi : IDataApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataApi(string basePath)
        {
            this.Configuration = Fingrid.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Fingrid.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Fingrid.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Fingrid.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DataApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Fingrid.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// GetMultipleTimeseriesData Get data for multiple datasets. Returns empty array if no data is found. If only part of requested datasets have data in generel or for requested timespan, those data are returned.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasets">Comma-separated list of dataset ids</param>
        /// <param name="startTime">Format - date-time (as date-time in RFC3339). Starting time from which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="endTime">Format - date-time (as date-time in RFC3339). Ending time up to which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="format">Response format. Either json, csv or xml. Default is json. (optional)</param>
        /// <param name="oneRowPerTimePeriod">If true, returns one row per time period, instead of one row per observation. Result has an attribute for each requested dataset. Currently does not support XML. Default is false. (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="locale">Language for response. Used only if oneRowPerTimePeriod is true. Either en or fi. Default is en. (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">Order results in this direction. Either asc or desc. Default is asc. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TimeseriesDataResponse</returns>
        public TimeseriesDataResponse GetMultipleTimeseriesData(string datasets, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), string format = default(string), bool? oneRowPerTimePeriod = default(bool?), int? page = default(int?), int? pageSize = default(int?), string locale = default(string), string sortBy = default(string), string sortOrder = default(string), int operationIndex = 0)
        {
            ApiResponse<TimeseriesDataResponse> localVarResponse = GetMultipleTimeseriesDataWithHttpInfo(datasets, startTime, endTime, format, oneRowPerTimePeriod, page, pageSize, locale, sortBy, sortOrder);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetMultipleTimeseriesData Get data for multiple datasets. Returns empty array if no data is found. If only part of requested datasets have data in generel or for requested timespan, those data are returned.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasets">Comma-separated list of dataset ids</param>
        /// <param name="startTime">Format - date-time (as date-time in RFC3339). Starting time from which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="endTime">Format - date-time (as date-time in RFC3339). Ending time up to which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="format">Response format. Either json, csv or xml. Default is json. (optional)</param>
        /// <param name="oneRowPerTimePeriod">If true, returns one row per time period, instead of one row per observation. Result has an attribute for each requested dataset. Currently does not support XML. Default is false. (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="locale">Language for response. Used only if oneRowPerTimePeriod is true. Either en or fi. Default is en. (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">Order results in this direction. Either asc or desc. Default is asc. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TimeseriesDataResponse</returns>
        public ApiResponse<TimeseriesDataResponse> GetMultipleTimeseriesDataWithHttpInfo(string datasets, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), string format = default(string), bool? oneRowPerTimePeriod = default(bool?), int? page = default(int?), int? pageSize = default(int?), string locale = default(string), string sortBy = default(string), string sortOrder = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'datasets' is set
            if (datasets == null)
            {
                throw new ApiException(400, "Missing required parameter 'datasets' when calling DataApi->GetMultipleTimeseriesData");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "datasets", datasets));
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (oneRowPerTimePeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "oneRowPerTimePeriod", oneRowPerTimePeriod));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (locale != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "locale", locale));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }

            localVarRequestOptions.Operation = "DataApi.GetMultipleTimeseriesData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (apiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TimeseriesDataResponse>("/data", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMultipleTimeseriesData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetMultipleTimeseriesData Get data for multiple datasets. Returns empty array if no data is found. If only part of requested datasets have data in generel or for requested timespan, those data are returned.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasets">Comma-separated list of dataset ids</param>
        /// <param name="startTime">Format - date-time (as date-time in RFC3339). Starting time from which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="endTime">Format - date-time (as date-time in RFC3339). Ending time up to which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="format">Response format. Either json, csv or xml. Default is json. (optional)</param>
        /// <param name="oneRowPerTimePeriod">If true, returns one row per time period, instead of one row per observation. Result has an attribute for each requested dataset. Currently does not support XML. Default is false. (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="locale">Language for response. Used only if oneRowPerTimePeriod is true. Either en or fi. Default is en. (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">Order results in this direction. Either asc or desc. Default is asc. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeseriesDataResponse</returns>
        public async System.Threading.Tasks.Task<TimeseriesDataResponse> GetMultipleTimeseriesDataAsync(string datasets, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), string format = default(string), bool? oneRowPerTimePeriod = default(bool?), int? page = default(int?), int? pageSize = default(int?), string locale = default(string), string sortBy = default(string), string sortOrder = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<TimeseriesDataResponse> localVarResponse = await GetMultipleTimeseriesDataWithHttpInfoAsync(datasets, startTime, endTime, format, oneRowPerTimePeriod, page, pageSize, locale, sortBy, sortOrder, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetMultipleTimeseriesData Get data for multiple datasets. Returns empty array if no data is found. If only part of requested datasets have data in generel or for requested timespan, those data are returned.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasets">Comma-separated list of dataset ids</param>
        /// <param name="startTime">Format - date-time (as date-time in RFC3339). Starting time from which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="endTime">Format - date-time (as date-time in RFC3339). Ending time up to which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format. (optional)</param>
        /// <param name="format">Response format. Either json, csv or xml. Default is json. (optional)</param>
        /// <param name="oneRowPerTimePeriod">If true, returns one row per time period, instead of one row per observation. Result has an attribute for each requested dataset. Currently does not support XML. Default is false. (optional)</param>
        /// <param name="page">Format - int32. Number of page. Default is 1. (optional)</param>
        /// <param name="pageSize">Format - int32. Number of results per page. Value can be between 1-20000. Default is 10. (optional)</param>
        /// <param name="locale">Language for response. Used only if oneRowPerTimePeriod is true. Either en or fi. Default is en. (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">Order results in this direction. Either asc or desc. Default is asc. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeseriesDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TimeseriesDataResponse>> GetMultipleTimeseriesDataWithHttpInfoAsync(string datasets, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), string format = default(string), bool? oneRowPerTimePeriod = default(bool?), int? page = default(int?), int? pageSize = default(int?), string locale = default(string), string sortBy = default(string), string sortOrder = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'datasets' is set
            if (datasets == null)
            {
                throw new ApiException(400, "Missing required parameter 'datasets' when calling DataApi->GetMultipleTimeseriesData");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "datasets", datasets));
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (oneRowPerTimePeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "oneRowPerTimePeriod", oneRowPerTimePeriod));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (locale != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "locale", locale));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }

            localVarRequestOptions.Operation = "DataApi.GetMultipleTimeseriesData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (apiKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TimeseriesDataResponse>("/data", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMultipleTimeseriesData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
