/*
 * avoindata-api
 *
 * API for Fingrid Open Data
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using Npgsql;
using OpenAPIDateConverter = Fingrid.Client.OpenAPIDateConverter;

namespace Fingrid.Model
{
    /// <summary>
    /// TimeseriesData
    /// </summary>
    [DataContract(Name = "TimeseriesData")]
    public partial class TimeseriesData : IEquatable<TimeseriesData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeseriesData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TimeseriesData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeseriesData" /> class.
        /// </summary>
        /// <param name="datasetId">datasetId (required).</param>
        /// <param name="modifiedAtUtc">modifiedAtUtc.</param>
        /// <param name="startTime">startTime (required).</param>
        /// <param name="endTime">endTime (required).</param>
        /// <param name="value">value (required).</param>
        public TimeseriesData(double datasetId = default(double), DateTime modifiedAtUtc = default(DateTime), DateTime startTime = default(DateTime), DateTime endTime = default(DateTime), double value = default(double))
        {
            this.DatasetId = datasetId;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.Value = value;
            this.ModifiedAtUtc = modifiedAtUtc;
        }

        /// <summary>
        /// Gets or Sets DatasetId
        /// </summary>
        [DataMember(Name = "datasetId", IsRequired = true, EmitDefaultValue = true)]
        public double DatasetId { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedAtUtc
        /// </summary>
        [DataMember(Name = "modifiedAtUtc", EmitDefaultValue = false)]
        public DateTime ModifiedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "startTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name = "endTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime EndTime { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public double Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TimeseriesData {\n");
            sb.Append("  DatasetId: ").Append(DatasetId).Append("\n");
            sb.Append("  ModifiedAtUtc: ").Append(ModifiedAtUtc).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeseriesData);
        }

        /// <summary>
        /// Returns true if TimeseriesData instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeseriesData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeseriesData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DatasetId == input.DatasetId ||
                    this.DatasetId.Equals(input.DatasetId)
                ) && 
                (
                    this.ModifiedAtUtc == input.ModifiedAtUtc ||
                    (this.ModifiedAtUtc != null &&
                    this.ModifiedAtUtc.Equals(input.ModifiedAtUtc))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DatasetId.GetHashCode();
                if (this.ModifiedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedAtUtc.GetHashCode();
                }
                if (this.StartTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                }
                if (this.EndTime != null)
                {
                    hashCode = (hashCode * 59) + this.EndTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
        
        /// <summary>
        /// Add metrics to the parameter collection
        /// </summary>
        /// <param name="parameterCollection"></param>
        public void AddMetrics(NpgsqlParameterCollection parameterCollection)
        {
            parameterCollection.AddWithValue("time", EndTime);
            parameterCollection.AddWithValue("dataset_id", DatasetId);
            parameterCollection.AddWithValue("modified_at_utc", ModifiedAtUtc);
            parameterCollection.AddWithValue("start_time", StartTime);
            parameterCollection.AddWithValue("end_time", EndTime);
            parameterCollection.AddWithValue("value", Value);
        }
    }
}
