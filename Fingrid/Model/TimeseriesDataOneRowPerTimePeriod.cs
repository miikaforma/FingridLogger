/*
 * avoindata-api
 *
 * API for Fingrid Open Data
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fingrid.Client.OpenAPIDateConverter;

namespace Fingrid.Model
{
    /// <summary>
    /// TimeseriesDataOneRowPerTimePeriod
    /// </summary>
    [DataContract(Name = "TimeseriesDataOneRowPerTimePeriod")]
    public partial class TimeseriesDataOneRowPerTimePeriod : Dictionary<String, TimeseriesDataOneRowPerTimePeriodValue>, IEquatable<TimeseriesDataOneRowPerTimePeriod>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeseriesDataOneRowPerTimePeriod" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TimeseriesDataOneRowPerTimePeriod() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeseriesDataOneRowPerTimePeriod" /> class.
        /// </summary>
        /// <param name="endTime">endTime (required).</param>
        /// <param name="startTime">startTime (required).</param>
        public TimeseriesDataOneRowPerTimePeriod(DateTime endTime = default(DateTime), DateTime startTime = default(DateTime)) : base()
        {
            this.EndTime = endTime;
            this.StartTime = startTime;
        }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name = "endTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime EndTime { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "startTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TimeseriesDataOneRowPerTimePeriod {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeseriesDataOneRowPerTimePeriod);
        }

        /// <summary>
        /// Returns true if TimeseriesDataOneRowPerTimePeriod instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeseriesDataOneRowPerTimePeriod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeseriesDataOneRowPerTimePeriod input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && base.Equals(input) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.EndTime != null)
                {
                    hashCode = (hashCode * 59) + this.EndTime.GetHashCode();
                }
                if (this.StartTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
