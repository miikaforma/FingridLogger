/*
 * avoindata-api
 *
 * API for Fingrid Open Data
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fingrid.Client.OpenAPIDateConverter;

namespace Fingrid.Model
{
    /// <summary>
    /// Notification
    /// </summary>
    [DataContract(Name = "Notification")]
    public partial class Notification : IEquatable<Notification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Notification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Notification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Notification" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="modifiedAtUtc">modifiedAtUtc.</param>
        /// <param name="startTimeUtc">startTimeUtc (required).</param>
        /// <param name="endTimeUtc">endTimeUtc (required).</param>
        /// <param name="messageFi">messageFi (required).</param>
        /// <param name="messageEn">messageEn (required).</param>
        /// <param name="linkFi">linkFi.</param>
        /// <param name="linkEn">linkEn.</param>
        /// <param name="linkTextFi">linkTextFi.</param>
        /// <param name="linkTextEn">linkTextEn.</param>
        public Notification(double id = default(double), DateTime modifiedAtUtc = default(DateTime), DateTime startTimeUtc = default(DateTime), DateTime endTimeUtc = default(DateTime), string messageFi = default(string), string messageEn = default(string), string linkFi = default(string), string linkEn = default(string), string linkTextFi = default(string), string linkTextEn = default(string))
        {
            this.Id = id;
            this.StartTimeUtc = startTimeUtc;
            this.EndTimeUtc = endTimeUtc;
            // to ensure "messageFi" is required (not null)
            if (messageFi == null)
            {
                throw new ArgumentNullException("messageFi is a required property for Notification and cannot be null");
            }
            this.MessageFi = messageFi;
            // to ensure "messageEn" is required (not null)
            if (messageEn == null)
            {
                throw new ArgumentNullException("messageEn is a required property for Notification and cannot be null");
            }
            this.MessageEn = messageEn;
            this.ModifiedAtUtc = modifiedAtUtc;
            this.LinkFi = linkFi;
            this.LinkEn = linkEn;
            this.LinkTextFi = linkTextFi;
            this.LinkTextEn = linkTextEn;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public double Id { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedAtUtc
        /// </summary>
        [DataMember(Name = "modifiedAtUtc", EmitDefaultValue = false)]
        public DateTime ModifiedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets StartTimeUtc
        /// </summary>
        [DataMember(Name = "startTimeUtc", IsRequired = true, EmitDefaultValue = true)]
        public DateTime StartTimeUtc { get; set; }

        /// <summary>
        /// Gets or Sets EndTimeUtc
        /// </summary>
        [DataMember(Name = "endTimeUtc", IsRequired = true, EmitDefaultValue = true)]
        public DateTime EndTimeUtc { get; set; }

        /// <summary>
        /// Gets or Sets MessageFi
        /// </summary>
        [DataMember(Name = "messageFi", IsRequired = true, EmitDefaultValue = true)]
        public string MessageFi { get; set; }

        /// <summary>
        /// Gets or Sets MessageEn
        /// </summary>
        [DataMember(Name = "messageEn", IsRequired = true, EmitDefaultValue = true)]
        public string MessageEn { get; set; }

        /// <summary>
        /// Gets or Sets LinkFi
        /// </summary>
        [DataMember(Name = "linkFi", EmitDefaultValue = false)]
        public string LinkFi { get; set; }

        /// <summary>
        /// Gets or Sets LinkEn
        /// </summary>
        [DataMember(Name = "linkEn", EmitDefaultValue = false)]
        public string LinkEn { get; set; }

        /// <summary>
        /// Gets or Sets LinkTextFi
        /// </summary>
        [DataMember(Name = "linkTextFi", EmitDefaultValue = false)]
        public string LinkTextFi { get; set; }

        /// <summary>
        /// Gets or Sets LinkTextEn
        /// </summary>
        [DataMember(Name = "linkTextEn", EmitDefaultValue = false)]
        public string LinkTextEn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Notification {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ModifiedAtUtc: ").Append(ModifiedAtUtc).Append("\n");
            sb.Append("  StartTimeUtc: ").Append(StartTimeUtc).Append("\n");
            sb.Append("  EndTimeUtc: ").Append(EndTimeUtc).Append("\n");
            sb.Append("  MessageFi: ").Append(MessageFi).Append("\n");
            sb.Append("  MessageEn: ").Append(MessageEn).Append("\n");
            sb.Append("  LinkFi: ").Append(LinkFi).Append("\n");
            sb.Append("  LinkEn: ").Append(LinkEn).Append("\n");
            sb.Append("  LinkTextFi: ").Append(LinkTextFi).Append("\n");
            sb.Append("  LinkTextEn: ").Append(LinkTextEn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Notification);
        }

        /// <summary>
        /// Returns true if Notification instances are equal
        /// </summary>
        /// <param name="input">Instance of Notification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Notification input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.ModifiedAtUtc == input.ModifiedAtUtc ||
                    (this.ModifiedAtUtc != null &&
                    this.ModifiedAtUtc.Equals(input.ModifiedAtUtc))
                ) && 
                (
                    this.StartTimeUtc == input.StartTimeUtc ||
                    (this.StartTimeUtc != null &&
                    this.StartTimeUtc.Equals(input.StartTimeUtc))
                ) && 
                (
                    this.EndTimeUtc == input.EndTimeUtc ||
                    (this.EndTimeUtc != null &&
                    this.EndTimeUtc.Equals(input.EndTimeUtc))
                ) && 
                (
                    this.MessageFi == input.MessageFi ||
                    (this.MessageFi != null &&
                    this.MessageFi.Equals(input.MessageFi))
                ) && 
                (
                    this.MessageEn == input.MessageEn ||
                    (this.MessageEn != null &&
                    this.MessageEn.Equals(input.MessageEn))
                ) && 
                (
                    this.LinkFi == input.LinkFi ||
                    (this.LinkFi != null &&
                    this.LinkFi.Equals(input.LinkFi))
                ) && 
                (
                    this.LinkEn == input.LinkEn ||
                    (this.LinkEn != null &&
                    this.LinkEn.Equals(input.LinkEn))
                ) && 
                (
                    this.LinkTextFi == input.LinkTextFi ||
                    (this.LinkTextFi != null &&
                    this.LinkTextFi.Equals(input.LinkTextFi))
                ) && 
                (
                    this.LinkTextEn == input.LinkTextEn ||
                    (this.LinkTextEn != null &&
                    this.LinkTextEn.Equals(input.LinkTextEn))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.ModifiedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedAtUtc.GetHashCode();
                }
                if (this.StartTimeUtc != null)
                {
                    hashCode = (hashCode * 59) + this.StartTimeUtc.GetHashCode();
                }
                if (this.EndTimeUtc != null)
                {
                    hashCode = (hashCode * 59) + this.EndTimeUtc.GetHashCode();
                }
                if (this.MessageFi != null)
                {
                    hashCode = (hashCode * 59) + this.MessageFi.GetHashCode();
                }
                if (this.MessageEn != null)
                {
                    hashCode = (hashCode * 59) + this.MessageEn.GetHashCode();
                }
                if (this.LinkFi != null)
                {
                    hashCode = (hashCode * 59) + this.LinkFi.GetHashCode();
                }
                if (this.LinkEn != null)
                {
                    hashCode = (hashCode * 59) + this.LinkEn.GetHashCode();
                }
                if (this.LinkTextFi != null)
                {
                    hashCode = (hashCode * 59) + this.LinkTextFi.GetHashCode();
                }
                if (this.LinkTextEn != null)
                {
                    hashCode = (hashCode * 59) + this.LinkTextEn.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
