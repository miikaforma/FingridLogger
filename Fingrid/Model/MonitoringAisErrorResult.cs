/*
 * avoindata-api
 *
 * API for Fingrid Open Data
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fingrid.Client.OpenAPIDateConverter;

namespace Fingrid.Model
{
    /// <summary>
    /// MonitoringAisErrorResult
    /// </summary>
    [DataContract(Name = "MonitoringAisErrorResult")]
    public partial class MonitoringAisErrorResult : IEquatable<MonitoringAisErrorResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MonitoringAisErrorResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MonitoringAisErrorResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MonitoringAisErrorResult" /> class.
        /// </summary>
        /// <param name="errorMessage">errorMessage (required).</param>
        /// <param name="errorProcedure">errorProcedure (required).</param>
        /// <param name="userName">userName (required).</param>
        /// <param name="errorDateTime">errorDateTime (required).</param>
        public MonitoringAisErrorResult(string errorMessage = default(string), string errorProcedure = default(string), string userName = default(string), DateTime errorDateTime = default(DateTime))
        {
            // to ensure "errorMessage" is required (not null)
            if (errorMessage == null)
            {
                throw new ArgumentNullException("errorMessage is a required property for MonitoringAisErrorResult and cannot be null");
            }
            this.ErrorMessage = errorMessage;
            // to ensure "errorProcedure" is required (not null)
            if (errorProcedure == null)
            {
                throw new ArgumentNullException("errorProcedure is a required property for MonitoringAisErrorResult and cannot be null");
            }
            this.ErrorProcedure = errorProcedure;
            // to ensure "userName" is required (not null)
            if (userName == null)
            {
                throw new ArgumentNullException("userName is a required property for MonitoringAisErrorResult and cannot be null");
            }
            this.UserName = userName;
            this.ErrorDateTime = errorDateTime;
        }

        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [DataMember(Name = "ErrorMessage", IsRequired = true, EmitDefaultValue = true)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Gets or Sets ErrorProcedure
        /// </summary>
        [DataMember(Name = "ErrorProcedure", IsRequired = true, EmitDefaultValue = true)]
        public string ErrorProcedure { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name = "UserName", IsRequired = true, EmitDefaultValue = true)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets ErrorDateTime
        /// </summary>
        [DataMember(Name = "ErrorDateTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime ErrorDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MonitoringAisErrorResult {\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  ErrorProcedure: ").Append(ErrorProcedure).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  ErrorDateTime: ").Append(ErrorDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MonitoringAisErrorResult);
        }

        /// <summary>
        /// Returns true if MonitoringAisErrorResult instances are equal
        /// </summary>
        /// <param name="input">Instance of MonitoringAisErrorResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MonitoringAisErrorResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.ErrorProcedure == input.ErrorProcedure ||
                    (this.ErrorProcedure != null &&
                    this.ErrorProcedure.Equals(input.ErrorProcedure))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.ErrorDateTime == input.ErrorDateTime ||
                    (this.ErrorDateTime != null &&
                    this.ErrorDateTime.Equals(input.ErrorDateTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ErrorMessage != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorMessage.GetHashCode();
                }
                if (this.ErrorProcedure != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorProcedure.GetHashCode();
                }
                if (this.UserName != null)
                {
                    hashCode = (hashCode * 59) + this.UserName.GetHashCode();
                }
                if (this.ErrorDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorDateTime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
