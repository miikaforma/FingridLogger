/*
 * avoindata-api
 *
 * API for Fingrid Open Data
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fingrid.Client.OpenAPIDateConverter;

namespace Fingrid.Model
{
    /// <summary>
    /// HealthStatus
    /// </summary>
    [DataContract(Name = "HealthStatus")]
    public partial class HealthStatus : IEquatable<HealthStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HealthStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HealthStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HealthStatus" /> class.
        /// </summary>
        /// <param name="network">network (required).</param>
        /// <param name="database">database (required).</param>
        /// <param name="app">app (required).</param>
        public HealthStatus(StatusResponse network = default(StatusResponse), StatusResponse database = default(StatusResponse), StatusResponse app = default(StatusResponse))
        {
            // to ensure "network" is required (not null)
            if (network == null)
            {
                throw new ArgumentNullException("network is a required property for HealthStatus and cannot be null");
            }
            this.Network = network;
            // to ensure "database" is required (not null)
            if (database == null)
            {
                throw new ArgumentNullException("database is a required property for HealthStatus and cannot be null");
            }
            this.Database = database;
            // to ensure "app" is required (not null)
            if (app == null)
            {
                throw new ArgumentNullException("app is a required property for HealthStatus and cannot be null");
            }
            this.App = app;
        }

        /// <summary>
        /// Gets or Sets Network
        /// </summary>
        [DataMember(Name = "network", IsRequired = true, EmitDefaultValue = true)]
        public StatusResponse Network { get; set; }

        /// <summary>
        /// Gets or Sets Database
        /// </summary>
        [DataMember(Name = "database", IsRequired = true, EmitDefaultValue = true)]
        public StatusResponse Database { get; set; }

        /// <summary>
        /// Gets or Sets App
        /// </summary>
        [DataMember(Name = "app", IsRequired = true, EmitDefaultValue = true)]
        public StatusResponse App { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HealthStatus {\n");
            sb.Append("  Network: ").Append(Network).Append("\n");
            sb.Append("  Database: ").Append(Database).Append("\n");
            sb.Append("  App: ").Append(App).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HealthStatus);
        }

        /// <summary>
        /// Returns true if HealthStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of HealthStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HealthStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Network == input.Network ||
                    (this.Network != null &&
                    this.Network.Equals(input.Network))
                ) && 
                (
                    this.Database == input.Database ||
                    (this.Database != null &&
                    this.Database.Equals(input.Database))
                ) && 
                (
                    this.App == input.App ||
                    (this.App != null &&
                    this.App.Equals(input.App))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Network != null)
                {
                    hashCode = (hashCode * 59) + this.Network.GetHashCode();
                }
                if (this.Database != null)
                {
                    hashCode = (hashCode * 59) + this.Database.GetHashCode();
                }
                if (this.App != null)
                {
                    hashCode = (hashCode * 59) + this.App.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
