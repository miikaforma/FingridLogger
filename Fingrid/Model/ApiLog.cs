/*
 * avoindata-api
 *
 * API for Fingrid Open Data
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fingrid.Client.OpenAPIDateConverter;

namespace Fingrid.Model
{
    /// <summary>
    /// ApiLog
    /// </summary>
    [DataContract(Name = "ApiLog")]
    public partial class ApiLog : IEquatable<ApiLog>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiLog" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApiLog() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiLog" /> class.
        /// </summary>
        /// <param name="year">year (required).</param>
        /// <param name="month">month (required).</param>
        /// <param name="intendeduse">intendeduse (required).</param>
        /// <param name="path">path (required).</param>
        /// <param name="datasets">datasets (required).</param>
        /// <param name="searchParam">searchParam (required).</param>
        /// <param name="count">count (required).</param>
        public ApiLog(double year = default(double), double month = default(double), string intendeduse = default(string), string path = default(string), string datasets = default(string), string searchParam = default(string), double count = default(double))
        {
            this.Year = year;
            this.Month = month;
            // to ensure "intendeduse" is required (not null)
            if (intendeduse == null)
            {
                throw new ArgumentNullException("intendeduse is a required property for ApiLog and cannot be null");
            }
            this.Intendeduse = intendeduse;
            // to ensure "path" is required (not null)
            if (path == null)
            {
                throw new ArgumentNullException("path is a required property for ApiLog and cannot be null");
            }
            this.Path = path;
            // to ensure "datasets" is required (not null)
            if (datasets == null)
            {
                throw new ArgumentNullException("datasets is a required property for ApiLog and cannot be null");
            }
            this.Datasets = datasets;
            // to ensure "searchParam" is required (not null)
            if (searchParam == null)
            {
                throw new ArgumentNullException("searchParam is a required property for ApiLog and cannot be null");
            }
            this.SearchParam = searchParam;
            this.Count = count;
        }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name = "year", IsRequired = true, EmitDefaultValue = true)]
        public double Year { get; set; }

        /// <summary>
        /// Gets or Sets Month
        /// </summary>
        [DataMember(Name = "month", IsRequired = true, EmitDefaultValue = true)]
        public double Month { get; set; }

        /// <summary>
        /// Gets or Sets Intendeduse
        /// </summary>
        [DataMember(Name = "intendeduse", IsRequired = true, EmitDefaultValue = true)]
        public string Intendeduse { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", IsRequired = true, EmitDefaultValue = true)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Datasets
        /// </summary>
        [DataMember(Name = "datasets", IsRequired = true, EmitDefaultValue = true)]
        public string Datasets { get; set; }

        /// <summary>
        /// Gets or Sets SearchParam
        /// </summary>
        [DataMember(Name = "searchParam", IsRequired = true, EmitDefaultValue = true)]
        public string SearchParam { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "count", IsRequired = true, EmitDefaultValue = true)]
        public double Count { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiLog {\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("  Intendeduse: ").Append(Intendeduse).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Datasets: ").Append(Datasets).Append("\n");
            sb.Append("  SearchParam: ").Append(SearchParam).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiLog);
        }

        /// <summary>
        /// Returns true if ApiLog instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiLog input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Year == input.Year ||
                    this.Year.Equals(input.Year)
                ) && 
                (
                    this.Month == input.Month ||
                    this.Month.Equals(input.Month)
                ) && 
                (
                    this.Intendeduse == input.Intendeduse ||
                    (this.Intendeduse != null &&
                    this.Intendeduse.Equals(input.Intendeduse))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Datasets == input.Datasets ||
                    (this.Datasets != null &&
                    this.Datasets.Equals(input.Datasets))
                ) && 
                (
                    this.SearchParam == input.SearchParam ||
                    (this.SearchParam != null &&
                    this.SearchParam.Equals(input.SearchParam))
                ) && 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Year.GetHashCode();
                hashCode = (hashCode * 59) + this.Month.GetHashCode();
                if (this.Intendeduse != null)
                {
                    hashCode = (hashCode * 59) + this.Intendeduse.GetHashCode();
                }
                if (this.Path != null)
                {
                    hashCode = (hashCode * 59) + this.Path.GetHashCode();
                }
                if (this.Datasets != null)
                {
                    hashCode = (hashCode * 59) + this.Datasets.GetHashCode();
                }
                if (this.SearchParam != null)
                {
                    hashCode = (hashCode * 59) + this.SearchParam.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
