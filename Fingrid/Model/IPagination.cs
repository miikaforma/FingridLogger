/*
 * avoindata-api
 *
 * API for Fingrid Open Data
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fingrid.Client.OpenAPIDateConverter;

namespace Fingrid.Model
{
    /// <summary>
    /// IPagination
    /// </summary>
    [DataContract(Name = "IPagination")]
    public partial class IPagination : IEquatable<IPagination>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IPagination" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IPagination() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IPagination" /> class.
        /// </summary>
        /// <param name="total">total.</param>
        /// <param name="lastPage">lastPage.</param>
        /// <param name="nextPage">nextPage.</param>
        /// <param name="prevPage">prevPage.</param>
        /// <param name="currentPage">currentPage (required).</param>
        /// <param name="perPage">perPage (required).</param>
        /// <param name="from">from (required).</param>
        /// <param name="to">to (required).</param>
        public IPagination(double total = default(double), double lastPage = default(double), double? nextPage = default(double?), double? prevPage = default(double?), double currentPage = default(double), double perPage = default(double), double from = default(double), double to = default(double))
        {
            this.CurrentPage = currentPage;
            this.PerPage = perPage;
            this.From = from;
            this.To = to;
            this.Total = total;
            this.LastPage = lastPage;
            this.NextPage = nextPage;
            this.PrevPage = prevPage;
        }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public double Total { get; set; }

        /// <summary>
        /// Gets or Sets LastPage
        /// </summary>
        [DataMember(Name = "lastPage", EmitDefaultValue = false)]
        public double LastPage { get; set; }

        /// <summary>
        /// Gets or Sets NextPage
        /// </summary>
        [DataMember(Name = "nextPage", EmitDefaultValue = true)]
        public double? NextPage { get; set; }

        /// <summary>
        /// Gets or Sets PrevPage
        /// </summary>
        [DataMember(Name = "prevPage", EmitDefaultValue = true)]
        public double? PrevPage { get; set; }

        /// <summary>
        /// Gets or Sets CurrentPage
        /// </summary>
        [DataMember(Name = "currentPage", IsRequired = true, EmitDefaultValue = true)]
        public double CurrentPage { get; set; }

        /// <summary>
        /// Gets or Sets PerPage
        /// </summary>
        [DataMember(Name = "perPage", IsRequired = true, EmitDefaultValue = true)]
        public double PerPage { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = true)]
        public double From { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public double To { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IPagination {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  LastPage: ").Append(LastPage).Append("\n");
            sb.Append("  NextPage: ").Append(NextPage).Append("\n");
            sb.Append("  PrevPage: ").Append(PrevPage).Append("\n");
            sb.Append("  CurrentPage: ").Append(CurrentPage).Append("\n");
            sb.Append("  PerPage: ").Append(PerPage).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IPagination);
        }

        /// <summary>
        /// Returns true if IPagination instances are equal
        /// </summary>
        /// <param name="input">Instance of IPagination to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IPagination input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                ) && 
                (
                    this.LastPage == input.LastPage ||
                    this.LastPage.Equals(input.LastPage)
                ) && 
                (
                    this.NextPage == input.NextPage ||
                    (this.NextPage != null &&
                    this.NextPage.Equals(input.NextPage))
                ) && 
                (
                    this.PrevPage == input.PrevPage ||
                    (this.PrevPage != null &&
                    this.PrevPage.Equals(input.PrevPage))
                ) && 
                (
                    this.CurrentPage == input.CurrentPage ||
                    this.CurrentPage.Equals(input.CurrentPage)
                ) && 
                (
                    this.PerPage == input.PerPage ||
                    this.PerPage.Equals(input.PerPage)
                ) && 
                (
                    this.From == input.From ||
                    this.From.Equals(input.From)
                ) && 
                (
                    this.To == input.To ||
                    this.To.Equals(input.To)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Total.GetHashCode();
                hashCode = (hashCode * 59) + this.LastPage.GetHashCode();
                if (this.NextPage != null)
                {
                    hashCode = (hashCode * 59) + this.NextPage.GetHashCode();
                }
                if (this.PrevPage != null)
                {
                    hashCode = (hashCode * 59) + this.PrevPage.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CurrentPage.GetHashCode();
                hashCode = (hashCode * 59) + this.PerPage.GetHashCode();
                hashCode = (hashCode * 59) + this.From.GetHashCode();
                hashCode = (hashCode * 59) + this.To.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
