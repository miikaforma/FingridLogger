/*
 * avoindata-api
 *
 * API for Fingrid Open Data
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fingrid.Client.OpenAPIDateConverter;

namespace Fingrid.Model
{
    /// <summary>
    /// MonitoringTimeseriesResult
    /// </summary>
    [DataContract(Name = "MonitoringTimeseriesResult")]
    public partial class MonitoringTimeseriesResult : IEquatable<MonitoringTimeseriesResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MonitoringTimeseriesResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MonitoringTimeseriesResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MonitoringTimeseriesResult" /> class.
        /// </summary>
        /// <param name="isMoreThan2CadencesLate">isMoreThan2CadencesLate.</param>
        /// <param name="maxModTime">maxModTime.</param>
        /// <param name="expectedUpdateCadenceMin">expectedUpdateCadenceMin.</param>
        /// <param name="updateCadence">updateCadence.</param>
        /// <param name="isPublic">isPublic (required).</param>
        /// <param name="numericId">numericId (required).</param>
        /// <param name="id">id (required).</param>
        public MonitoringTimeseriesResult(bool isMoreThan2CadencesLate = default(bool), DateTime maxModTime = default(DateTime), double expectedUpdateCadenceMin = default(double), string updateCadence = default(string), bool isPublic = default(bool), double numericId = default(double), string id = default(string))
        {
            this.IsPublic = isPublic;
            this.NumericId = numericId;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for MonitoringTimeseriesResult and cannot be null");
            }
            this.Id = id;
            this.IsMoreThan2CadencesLate = isMoreThan2CadencesLate;
            this.MaxModTime = maxModTime;
            this.ExpectedUpdateCadenceMin = expectedUpdateCadenceMin;
            this.UpdateCadence = updateCadence;
        }

        /// <summary>
        /// Gets or Sets IsMoreThan2CadencesLate
        /// </summary>
        [DataMember(Name = "isMoreThan2CadencesLate", EmitDefaultValue = true)]
        public bool IsMoreThan2CadencesLate { get; set; }

        /// <summary>
        /// Gets or Sets MaxModTime
        /// </summary>
        [DataMember(Name = "maxModTime", EmitDefaultValue = false)]
        public DateTime MaxModTime { get; set; }

        /// <summary>
        /// Gets or Sets ExpectedUpdateCadenceMin
        /// </summary>
        [DataMember(Name = "expectedUpdateCadenceMin", EmitDefaultValue = false)]
        public double ExpectedUpdateCadenceMin { get; set; }

        /// <summary>
        /// Gets or Sets UpdateCadence
        /// </summary>
        [DataMember(Name = "updateCadence", EmitDefaultValue = false)]
        public string UpdateCadence { get; set; }

        /// <summary>
        /// Gets or Sets IsPublic
        /// </summary>
        [DataMember(Name = "isPublic", IsRequired = true, EmitDefaultValue = true)]
        public bool IsPublic { get; set; }

        /// <summary>
        /// Gets or Sets NumericId
        /// </summary>
        [DataMember(Name = "numericId", IsRequired = true, EmitDefaultValue = true)]
        public double NumericId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MonitoringTimeseriesResult {\n");
            sb.Append("  IsMoreThan2CadencesLate: ").Append(IsMoreThan2CadencesLate).Append("\n");
            sb.Append("  MaxModTime: ").Append(MaxModTime).Append("\n");
            sb.Append("  ExpectedUpdateCadenceMin: ").Append(ExpectedUpdateCadenceMin).Append("\n");
            sb.Append("  UpdateCadence: ").Append(UpdateCadence).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  NumericId: ").Append(NumericId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MonitoringTimeseriesResult);
        }

        /// <summary>
        /// Returns true if MonitoringTimeseriesResult instances are equal
        /// </summary>
        /// <param name="input">Instance of MonitoringTimeseriesResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MonitoringTimeseriesResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IsMoreThan2CadencesLate == input.IsMoreThan2CadencesLate ||
                    this.IsMoreThan2CadencesLate.Equals(input.IsMoreThan2CadencesLate)
                ) && 
                (
                    this.MaxModTime == input.MaxModTime ||
                    (this.MaxModTime != null &&
                    this.MaxModTime.Equals(input.MaxModTime))
                ) && 
                (
                    this.ExpectedUpdateCadenceMin == input.ExpectedUpdateCadenceMin ||
                    this.ExpectedUpdateCadenceMin.Equals(input.ExpectedUpdateCadenceMin)
                ) && 
                (
                    this.UpdateCadence == input.UpdateCadence ||
                    (this.UpdateCadence != null &&
                    this.UpdateCadence.Equals(input.UpdateCadence))
                ) && 
                (
                    this.IsPublic == input.IsPublic ||
                    this.IsPublic.Equals(input.IsPublic)
                ) && 
                (
                    this.NumericId == input.NumericId ||
                    this.NumericId.Equals(input.NumericId)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IsMoreThan2CadencesLate.GetHashCode();
                if (this.MaxModTime != null)
                {
                    hashCode = (hashCode * 59) + this.MaxModTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExpectedUpdateCadenceMin.GetHashCode();
                if (this.UpdateCadence != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateCadence.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsPublic.GetHashCode();
                hashCode = (hashCode * 59) + this.NumericId.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
