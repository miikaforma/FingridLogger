/*
 * avoindata-api
 *
 * API for Fingrid Open Data
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fingrid.Client.OpenAPIDateConverter;

namespace Fingrid.Model
{
    /// <summary>
    /// Dataset
    /// </summary>
    [DataContract(Name = "Dataset")]
    public partial class Dataset : IEquatable<Dataset>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public DatasetType Type { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public DatasetStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Dataset" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Dataset() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Dataset" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="modifiedAtUtc">modifiedAtUtc.</param>
        /// <param name="type">type (required).</param>
        /// <param name="isPublic">isPublic (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="organization">organization (required).</param>
        /// <param name="nameFi">nameFi (required).</param>
        /// <param name="nameEn">nameEn (required).</param>
        /// <param name="descriptionFi">descriptionFi (required).</param>
        /// <param name="descriptionEn">descriptionEn (required).</param>
        /// <param name="dataPeriodFi">dataPeriodFi (required).</param>
        /// <param name="dataPeriodEn">dataPeriodEn (required).</param>
        /// <param name="unitFi">unitFi (required).</param>
        /// <param name="unitEn">unitEn (required).</param>
        /// <param name="updateCadenceFi">updateCadenceFi.</param>
        /// <param name="updateCadenceEn">updateCadenceEn.</param>
        /// <param name="contactPersons">contactPersons.</param>
        /// <param name="license">license.</param>
        /// <param name="keyWordsFi">keyWordsFi.</param>
        /// <param name="keyWordsEn">keyWordsEn.</param>
        /// <param name="contentGroupsFi">contentGroupsFi.</param>
        /// <param name="contentGroupsEn">contentGroupsEn.</param>
        /// <param name="availableFormats">availableFormats.</param>
        public Dataset(double id = default(double), DateTime modifiedAtUtc = default(DateTime), DatasetType type = default(DatasetType), bool isPublic = default(bool), DatasetStatus status = default(DatasetStatus), string organization = default(string), string nameFi = default(string), string nameEn = default(string), string descriptionFi = default(string), string descriptionEn = default(string), string dataPeriodFi = default(string), string dataPeriodEn = default(string), string unitFi = default(string), string unitEn = default(string), string updateCadenceFi = default(string), string updateCadenceEn = default(string), string contactPersons = default(string), License license = default(License), List<string> keyWordsFi = default(List<string>), List<string> keyWordsEn = default(List<string>), List<string> contentGroupsFi = default(List<string>), List<string> contentGroupsEn = default(List<string>), List<DatasetFormat> availableFormats = default(List<DatasetFormat>))
        {
            this.Id = id;
            this.Type = type;
            this.IsPublic = isPublic;
            this.Status = status;
            // to ensure "organization" is required (not null)
            if (organization == null)
            {
                throw new ArgumentNullException("organization is a required property for Dataset and cannot be null");
            }
            this.Organization = organization;
            // to ensure "nameFi" is required (not null)
            if (nameFi == null)
            {
                throw new ArgumentNullException("nameFi is a required property for Dataset and cannot be null");
            }
            this.NameFi = nameFi;
            // to ensure "nameEn" is required (not null)
            if (nameEn == null)
            {
                throw new ArgumentNullException("nameEn is a required property for Dataset and cannot be null");
            }
            this.NameEn = nameEn;
            // to ensure "descriptionFi" is required (not null)
            if (descriptionFi == null)
            {
                throw new ArgumentNullException("descriptionFi is a required property for Dataset and cannot be null");
            }
            this.DescriptionFi = descriptionFi;
            // to ensure "descriptionEn" is required (not null)
            if (descriptionEn == null)
            {
                throw new ArgumentNullException("descriptionEn is a required property for Dataset and cannot be null");
            }
            this.DescriptionEn = descriptionEn;
            // to ensure "dataPeriodFi" is required (not null)
            if (dataPeriodFi == null)
            {
                throw new ArgumentNullException("dataPeriodFi is a required property for Dataset and cannot be null");
            }
            this.DataPeriodFi = dataPeriodFi;
            // to ensure "dataPeriodEn" is required (not null)
            if (dataPeriodEn == null)
            {
                throw new ArgumentNullException("dataPeriodEn is a required property for Dataset and cannot be null");
            }
            this.DataPeriodEn = dataPeriodEn;
            // to ensure "unitFi" is required (not null)
            if (unitFi == null)
            {
                throw new ArgumentNullException("unitFi is a required property for Dataset and cannot be null");
            }
            this.UnitFi = unitFi;
            // to ensure "unitEn" is required (not null)
            if (unitEn == null)
            {
                throw new ArgumentNullException("unitEn is a required property for Dataset and cannot be null");
            }
            this.UnitEn = unitEn;
            this.ModifiedAtUtc = modifiedAtUtc;
            this.UpdateCadenceFi = updateCadenceFi;
            this.UpdateCadenceEn = updateCadenceEn;
            this.ContactPersons = contactPersons;
            this.License = license;
            this.KeyWordsFi = keyWordsFi;
            this.KeyWordsEn = keyWordsEn;
            this.ContentGroupsFi = contentGroupsFi;
            this.ContentGroupsEn = contentGroupsEn;
            this.AvailableFormats = availableFormats;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public double Id { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedAtUtc
        /// </summary>
        [DataMember(Name = "modifiedAtUtc", EmitDefaultValue = false)]
        public DateTime ModifiedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets IsPublic
        /// </summary>
        [DataMember(Name = "isPublic", IsRequired = true, EmitDefaultValue = true)]
        public bool IsPublic { get; set; }

        /// <summary>
        /// Gets or Sets Organization
        /// </summary>
        [DataMember(Name = "organization", IsRequired = true, EmitDefaultValue = true)]
        public string Organization { get; set; }

        /// <summary>
        /// Gets or Sets NameFi
        /// </summary>
        [DataMember(Name = "nameFi", IsRequired = true, EmitDefaultValue = true)]
        public string NameFi { get; set; }

        /// <summary>
        /// Gets or Sets NameEn
        /// </summary>
        [DataMember(Name = "nameEn", IsRequired = true, EmitDefaultValue = true)]
        public string NameEn { get; set; }

        /// <summary>
        /// Gets or Sets DescriptionFi
        /// </summary>
        [DataMember(Name = "descriptionFi", IsRequired = true, EmitDefaultValue = true)]
        public string DescriptionFi { get; set; }

        /// <summary>
        /// Gets or Sets DescriptionEn
        /// </summary>
        [DataMember(Name = "descriptionEn", IsRequired = true, EmitDefaultValue = true)]
        public string DescriptionEn { get; set; }

        /// <summary>
        /// Gets or Sets DataPeriodFi
        /// </summary>
        [DataMember(Name = "dataPeriodFi", IsRequired = true, EmitDefaultValue = true)]
        public string DataPeriodFi { get; set; }

        /// <summary>
        /// Gets or Sets DataPeriodEn
        /// </summary>
        [DataMember(Name = "dataPeriodEn", IsRequired = true, EmitDefaultValue = true)]
        public string DataPeriodEn { get; set; }

        /// <summary>
        /// Gets or Sets UnitFi
        /// </summary>
        [DataMember(Name = "unitFi", IsRequired = true, EmitDefaultValue = true)]
        public string UnitFi { get; set; }

        /// <summary>
        /// Gets or Sets UnitEn
        /// </summary>
        [DataMember(Name = "unitEn", IsRequired = true, EmitDefaultValue = true)]
        public string UnitEn { get; set; }

        /// <summary>
        /// Gets or Sets UpdateCadenceFi
        /// </summary>
        [DataMember(Name = "updateCadenceFi", EmitDefaultValue = false)]
        public string UpdateCadenceFi { get; set; }

        /// <summary>
        /// Gets or Sets UpdateCadenceEn
        /// </summary>
        [DataMember(Name = "updateCadenceEn", EmitDefaultValue = false)]
        public string UpdateCadenceEn { get; set; }

        /// <summary>
        /// Gets or Sets ContactPersons
        /// </summary>
        [DataMember(Name = "contactPersons", EmitDefaultValue = false)]
        public string ContactPersons { get; set; }

        /// <summary>
        /// Gets or Sets License
        /// </summary>
        [DataMember(Name = "license", EmitDefaultValue = false)]
        public License License { get; set; }

        /// <summary>
        /// Gets or Sets KeyWordsFi
        /// </summary>
        [DataMember(Name = "keyWordsFi", EmitDefaultValue = false)]
        public List<string> KeyWordsFi { get; set; }

        /// <summary>
        /// Gets or Sets KeyWordsEn
        /// </summary>
        [DataMember(Name = "keyWordsEn", EmitDefaultValue = false)]
        public List<string> KeyWordsEn { get; set; }

        /// <summary>
        /// Gets or Sets ContentGroupsFi
        /// </summary>
        [DataMember(Name = "contentGroupsFi", EmitDefaultValue = false)]
        public List<string> ContentGroupsFi { get; set; }

        /// <summary>
        /// Gets or Sets ContentGroupsEn
        /// </summary>
        [DataMember(Name = "contentGroupsEn", EmitDefaultValue = false)]
        public List<string> ContentGroupsEn { get; set; }

        /// <summary>
        /// Gets or Sets AvailableFormats
        /// </summary>
        [DataMember(Name = "availableFormats", EmitDefaultValue = false)]
        public List<DatasetFormat> AvailableFormats { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Dataset {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ModifiedAtUtc: ").Append(ModifiedAtUtc).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  NameFi: ").Append(NameFi).Append("\n");
            sb.Append("  NameEn: ").Append(NameEn).Append("\n");
            sb.Append("  DescriptionFi: ").Append(DescriptionFi).Append("\n");
            sb.Append("  DescriptionEn: ").Append(DescriptionEn).Append("\n");
            sb.Append("  DataPeriodFi: ").Append(DataPeriodFi).Append("\n");
            sb.Append("  DataPeriodEn: ").Append(DataPeriodEn).Append("\n");
            sb.Append("  UnitFi: ").Append(UnitFi).Append("\n");
            sb.Append("  UnitEn: ").Append(UnitEn).Append("\n");
            sb.Append("  UpdateCadenceFi: ").Append(UpdateCadenceFi).Append("\n");
            sb.Append("  UpdateCadenceEn: ").Append(UpdateCadenceEn).Append("\n");
            sb.Append("  ContactPersons: ").Append(ContactPersons).Append("\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("  KeyWordsFi: ").Append(KeyWordsFi).Append("\n");
            sb.Append("  KeyWordsEn: ").Append(KeyWordsEn).Append("\n");
            sb.Append("  ContentGroupsFi: ").Append(ContentGroupsFi).Append("\n");
            sb.Append("  ContentGroupsEn: ").Append(ContentGroupsEn).Append("\n");
            sb.Append("  AvailableFormats: ").Append(AvailableFormats).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Dataset);
        }

        /// <summary>
        /// Returns true if Dataset instances are equal
        /// </summary>
        /// <param name="input">Instance of Dataset to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Dataset input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.ModifiedAtUtc == input.ModifiedAtUtc ||
                    (this.ModifiedAtUtc != null &&
                    this.ModifiedAtUtc.Equals(input.ModifiedAtUtc))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.IsPublic == input.IsPublic ||
                    this.IsPublic.Equals(input.IsPublic)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Organization == input.Organization ||
                    (this.Organization != null &&
                    this.Organization.Equals(input.Organization))
                ) && 
                (
                    this.NameFi == input.NameFi ||
                    (this.NameFi != null &&
                    this.NameFi.Equals(input.NameFi))
                ) && 
                (
                    this.NameEn == input.NameEn ||
                    (this.NameEn != null &&
                    this.NameEn.Equals(input.NameEn))
                ) && 
                (
                    this.DescriptionFi == input.DescriptionFi ||
                    (this.DescriptionFi != null &&
                    this.DescriptionFi.Equals(input.DescriptionFi))
                ) && 
                (
                    this.DescriptionEn == input.DescriptionEn ||
                    (this.DescriptionEn != null &&
                    this.DescriptionEn.Equals(input.DescriptionEn))
                ) && 
                (
                    this.DataPeriodFi == input.DataPeriodFi ||
                    (this.DataPeriodFi != null &&
                    this.DataPeriodFi.Equals(input.DataPeriodFi))
                ) && 
                (
                    this.DataPeriodEn == input.DataPeriodEn ||
                    (this.DataPeriodEn != null &&
                    this.DataPeriodEn.Equals(input.DataPeriodEn))
                ) && 
                (
                    this.UnitFi == input.UnitFi ||
                    (this.UnitFi != null &&
                    this.UnitFi.Equals(input.UnitFi))
                ) && 
                (
                    this.UnitEn == input.UnitEn ||
                    (this.UnitEn != null &&
                    this.UnitEn.Equals(input.UnitEn))
                ) && 
                (
                    this.UpdateCadenceFi == input.UpdateCadenceFi ||
                    (this.UpdateCadenceFi != null &&
                    this.UpdateCadenceFi.Equals(input.UpdateCadenceFi))
                ) && 
                (
                    this.UpdateCadenceEn == input.UpdateCadenceEn ||
                    (this.UpdateCadenceEn != null &&
                    this.UpdateCadenceEn.Equals(input.UpdateCadenceEn))
                ) && 
                (
                    this.ContactPersons == input.ContactPersons ||
                    (this.ContactPersons != null &&
                    this.ContactPersons.Equals(input.ContactPersons))
                ) && 
                (
                    this.License == input.License ||
                    (this.License != null &&
                    this.License.Equals(input.License))
                ) && 
                (
                    this.KeyWordsFi == input.KeyWordsFi ||
                    this.KeyWordsFi != null &&
                    input.KeyWordsFi != null &&
                    this.KeyWordsFi.SequenceEqual(input.KeyWordsFi)
                ) && 
                (
                    this.KeyWordsEn == input.KeyWordsEn ||
                    this.KeyWordsEn != null &&
                    input.KeyWordsEn != null &&
                    this.KeyWordsEn.SequenceEqual(input.KeyWordsEn)
                ) && 
                (
                    this.ContentGroupsFi == input.ContentGroupsFi ||
                    this.ContentGroupsFi != null &&
                    input.ContentGroupsFi != null &&
                    this.ContentGroupsFi.SequenceEqual(input.ContentGroupsFi)
                ) && 
                (
                    this.ContentGroupsEn == input.ContentGroupsEn ||
                    this.ContentGroupsEn != null &&
                    input.ContentGroupsEn != null &&
                    this.ContentGroupsEn.SequenceEqual(input.ContentGroupsEn)
                ) && 
                (
                    this.AvailableFormats == input.AvailableFormats ||
                    this.AvailableFormats != null &&
                    input.AvailableFormats != null &&
                    this.AvailableFormats.SequenceEqual(input.AvailableFormats)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.ModifiedAtUtc != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedAtUtc.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.IsPublic.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Organization != null)
                {
                    hashCode = (hashCode * 59) + this.Organization.GetHashCode();
                }
                if (this.NameFi != null)
                {
                    hashCode = (hashCode * 59) + this.NameFi.GetHashCode();
                }
                if (this.NameEn != null)
                {
                    hashCode = (hashCode * 59) + this.NameEn.GetHashCode();
                }
                if (this.DescriptionFi != null)
                {
                    hashCode = (hashCode * 59) + this.DescriptionFi.GetHashCode();
                }
                if (this.DescriptionEn != null)
                {
                    hashCode = (hashCode * 59) + this.DescriptionEn.GetHashCode();
                }
                if (this.DataPeriodFi != null)
                {
                    hashCode = (hashCode * 59) + this.DataPeriodFi.GetHashCode();
                }
                if (this.DataPeriodEn != null)
                {
                    hashCode = (hashCode * 59) + this.DataPeriodEn.GetHashCode();
                }
                if (this.UnitFi != null)
                {
                    hashCode = (hashCode * 59) + this.UnitFi.GetHashCode();
                }
                if (this.UnitEn != null)
                {
                    hashCode = (hashCode * 59) + this.UnitEn.GetHashCode();
                }
                if (this.UpdateCadenceFi != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateCadenceFi.GetHashCode();
                }
                if (this.UpdateCadenceEn != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateCadenceEn.GetHashCode();
                }
                if (this.ContactPersons != null)
                {
                    hashCode = (hashCode * 59) + this.ContactPersons.GetHashCode();
                }
                if (this.License != null)
                {
                    hashCode = (hashCode * 59) + this.License.GetHashCode();
                }
                if (this.KeyWordsFi != null)
                {
                    hashCode = (hashCode * 59) + this.KeyWordsFi.GetHashCode();
                }
                if (this.KeyWordsEn != null)
                {
                    hashCode = (hashCode * 59) + this.KeyWordsEn.GetHashCode();
                }
                if (this.ContentGroupsFi != null)
                {
                    hashCode = (hashCode * 59) + this.ContentGroupsFi.GetHashCode();
                }
                if (this.ContentGroupsEn != null)
                {
                    hashCode = (hashCode * 59) + this.ContentGroupsEn.GetHashCode();
                }
                if (this.AvailableFormats != null)
                {
                    hashCode = (hashCode * 59) + this.AvailableFormats.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
