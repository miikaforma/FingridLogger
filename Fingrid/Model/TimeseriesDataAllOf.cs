/*
 * avoindata-api
 *
 * API for Fingrid Open Data
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fingrid.Client.OpenAPIDateConverter;

namespace Fingrid.Model
{
    /// <summary>
    /// TimeseriesDataAllOf
    /// </summary>
    [DataContract(Name = "TimeseriesData_allOf")]
    public partial class TimeseriesDataAllOf : IEquatable<TimeseriesDataAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeseriesDataAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TimeseriesDataAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeseriesDataAllOf" /> class.
        /// </summary>
        /// <param name="datasetId">datasetId (required).</param>
        public TimeseriesDataAllOf(double datasetId = default(double))
        {
            this.DatasetId = datasetId;
        }

        /// <summary>
        /// Gets or Sets DatasetId
        /// </summary>
        [DataMember(Name = "datasetId", IsRequired = true, EmitDefaultValue = true)]
        public double DatasetId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TimeseriesDataAllOf {\n");
            sb.Append("  DatasetId: ").Append(DatasetId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeseriesDataAllOf);
        }

        /// <summary>
        /// Returns true if TimeseriesDataAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeseriesDataAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeseriesDataAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DatasetId == input.DatasetId ||
                    this.DatasetId.Equals(input.DatasetId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DatasetId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
